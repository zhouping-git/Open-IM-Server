// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.0
// source: points.proto

package points

import (
	sdkws "github.com/OpenIMSDK/protocol/sdkws"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserPointsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *UserPointsReq) Reset() {
	*x = UserPointsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPointsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPointsReq) ProtoMessage() {}

func (x *UserPointsReq) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPointsReq.ProtoReflect.Descriptor instead.
func (*UserPointsReq) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{0}
}

func (x *UserPointsReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserPointsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points float32 `protobuf:"fixed32,1,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *UserPointsResp) Reset() {
	*x = UserPointsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPointsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPointsResp) ProtoMessage() {}

func (x *UserPointsResp) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPointsResp.ProtoReflect.Descriptor instead.
func (*UserPointsResp) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{1}
}

func (x *UserPointsResp) GetPoints() float32 {
	if x != nil {
		return x.Points
	}
	return 0
}

type UserPointsRechargeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string  `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Money  float32 `protobuf:"fixed32,2,opt,name=money,proto3" json:"money,omitempty"`
	Source int32   `protobuf:"varint,3,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *UserPointsRechargeReq) Reset() {
	*x = UserPointsRechargeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPointsRechargeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPointsRechargeReq) ProtoMessage() {}

func (x *UserPointsRechargeReq) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPointsRechargeReq.ProtoReflect.Descriptor instead.
func (*UserPointsRechargeReq) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{2}
}

func (x *UserPointsRechargeReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserPointsRechargeReq) GetMoney() float32 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *UserPointsRechargeReq) GetSource() int32 {
	if x != nil {
		return x.Source
	}
	return 0
}

type UserPointsRechargeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UserPointsRechargeResp) Reset() {
	*x = UserPointsRechargeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPointsRechargeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPointsRechargeResp) ProtoMessage() {}

func (x *UserPointsRechargeResp) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPointsRechargeResp.ProtoReflect.Descriptor instead.
func (*UserPointsRechargeResp) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{3}
}

func (x *UserPointsRechargeResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UserPointsWithdrawReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string  `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Points          float32 `protobuf:"fixed32,2,opt,name=points,proto3" json:"points,omitempty"`
	Target          int32   `protobuf:"varint,3,opt,name=target,proto3" json:"target,omitempty"`
	RelationAccount string  `protobuf:"bytes,4,opt,name=relationAccount,proto3" json:"relationAccount,omitempty"`
}

func (x *UserPointsWithdrawReq) Reset() {
	*x = UserPointsWithdrawReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPointsWithdrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPointsWithdrawReq) ProtoMessage() {}

func (x *UserPointsWithdrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPointsWithdrawReq.ProtoReflect.Descriptor instead.
func (*UserPointsWithdrawReq) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{4}
}

func (x *UserPointsWithdrawReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserPointsWithdrawReq) GetPoints() float32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *UserPointsWithdrawReq) GetTarget() int32 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *UserPointsWithdrawReq) GetRelationAccount() string {
	if x != nil {
		return x.RelationAccount
	}
	return ""
}

type UserPointsWithdrawResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UserPointsWithdrawResp) Reset() {
	*x = UserPointsWithdrawResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPointsWithdrawResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPointsWithdrawResp) ProtoMessage() {}

func (x *UserPointsWithdrawResp) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPointsWithdrawResp.ProtoReflect.Descriptor instead.
func (*UserPointsWithdrawResp) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{5}
}

func (x *UserPointsWithdrawResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type PointsWaterForTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string                   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	PointsWaterType int32                    `protobuf:"varint,2,opt,name=pointsWaterType,proto3" json:"pointsWaterType,omitempty"`
	Pagination      *sdkws.RequestPagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PointsWaterForTypeReq) Reset() {
	*x = PointsWaterForTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsWaterForTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsWaterForTypeReq) ProtoMessage() {}

func (x *PointsWaterForTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsWaterForTypeReq.ProtoReflect.Descriptor instead.
func (*PointsWaterForTypeReq) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{6}
}

func (x *PointsWaterForTypeReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PointsWaterForTypeReq) GetPointsWaterType() int32 {
	if x != nil {
		return x.PointsWaterType
	}
	return 0
}

func (x *PointsWaterForTypeReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type PointsWater struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointsWaterId   string  `protobuf:"bytes,1,opt,name=pointsWaterId,proto3" json:"pointsWaterId,omitempty"`
	UserId          string  `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Points          float32 `protobuf:"fixed32,3,opt,name=points,proto3" json:"points,omitempty"`
	Money           float32 `protobuf:"fixed32,4,opt,name=money,proto3" json:"money,omitempty"`
	PointsWaterType int32   `protobuf:"varint,5,opt,name=pointsWaterType,proto3" json:"pointsWaterType,omitempty"`
	Source          int32   `protobuf:"varint,6,opt,name=source,proto3" json:"source,omitempty"`
	Target          int32   `protobuf:"varint,7,opt,name=target,proto3" json:"target,omitempty"`
	RelationAccount string  `protobuf:"bytes,8,opt,name=relationAccount,proto3" json:"relationAccount,omitempty"`
	PointsWaterTime string  `protobuf:"bytes,9,opt,name=pointsWaterTime,proto3" json:"pointsWaterTime,omitempty"`
}

func (x *PointsWater) Reset() {
	*x = PointsWater{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsWater) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsWater) ProtoMessage() {}

func (x *PointsWater) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsWater.ProtoReflect.Descriptor instead.
func (*PointsWater) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{7}
}

func (x *PointsWater) GetPointsWaterId() string {
	if x != nil {
		return x.PointsWaterId
	}
	return ""
}

func (x *PointsWater) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PointsWater) GetPoints() float32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *PointsWater) GetMoney() float32 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *PointsWater) GetPointsWaterType() int32 {
	if x != nil {
		return x.PointsWaterType
	}
	return 0
}

func (x *PointsWater) GetSource() int32 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *PointsWater) GetTarget() int32 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *PointsWater) GetRelationAccount() string {
	if x != nil {
		return x.RelationAccount
	}
	return ""
}

func (x *PointsWater) GetPointsWaterTime() string {
	if x != nil {
		return x.PointsWaterTime
	}
	return ""
}

type PointsWaterForTypeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointsWater []*PointsWater `protobuf:"bytes,1,rep,name=pointsWater,proto3" json:"pointsWater,omitempty"`
	Count       uint32         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *PointsWaterForTypeResp) Reset() {
	*x = PointsWaterForTypeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsWaterForTypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsWaterForTypeResp) ProtoMessage() {}

func (x *PointsWaterForTypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsWaterForTypeResp.ProtoReflect.Descriptor instead.
func (*PointsWaterForTypeResp) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{8}
}

func (x *PointsWaterForTypeResp) GetPointsWater() []*PointsWater {
	if x != nil {
		return x.PointsWater
	}
	return nil
}

func (x *PointsWaterForTypeResp) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SendRedPacketRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedPacketId   string  `protobuf:"bytes,1,opt,name=redPacketId,proto3" json:"redPacketId,omitempty"`
	RedPacketType int32   `protobuf:"varint,2,opt,name=redPacketType,proto3" json:"redPacketType,omitempty"`
	GroupId       string  `protobuf:"bytes,3,opt,name=groupId,proto3" json:"groupId,omitempty"`
	SendUserId    string  `protobuf:"bytes,4,opt,name=sendUserId,proto3" json:"sendUserId,omitempty"`
	ReceiveUserId string  `protobuf:"bytes,5,opt,name=receiveUserId,proto3" json:"receiveUserId,omitempty"`
	Points        float32 `protobuf:"fixed32,6,opt,name=points,proto3" json:"points,omitempty"`
	Count         int32   `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	Title         string  `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	LastDigits    []int32 `protobuf:"varint,9,rep,packed,name=lastDigits,proto3" json:"lastDigits,omitempty"`
}

func (x *SendRedPacketRep) Reset() {
	*x = SendRedPacketRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRedPacketRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRedPacketRep) ProtoMessage() {}

func (x *SendRedPacketRep) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRedPacketRep.ProtoReflect.Descriptor instead.
func (*SendRedPacketRep) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{9}
}

func (x *SendRedPacketRep) GetRedPacketId() string {
	if x != nil {
		return x.RedPacketId
	}
	return ""
}

func (x *SendRedPacketRep) GetRedPacketType() int32 {
	if x != nil {
		return x.RedPacketType
	}
	return 0
}

func (x *SendRedPacketRep) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *SendRedPacketRep) GetSendUserId() string {
	if x != nil {
		return x.SendUserId
	}
	return ""
}

func (x *SendRedPacketRep) GetReceiveUserId() string {
	if x != nil {
		return x.ReceiveUserId
	}
	return ""
}

func (x *SendRedPacketRep) GetPoints() float32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *SendRedPacketRep) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SendRedPacketRep) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SendRedPacketRep) GetLastDigits() []int32 {
	if x != nil {
		return x.LastDigits
	}
	return nil
}

type BatchRedPacketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	SendUserId string `protobuf:"bytes,2,opt,name=sendUserId,proto3" json:"sendUserId,omitempty"`
	// 发送红包总数量
	RedPacketCount int32 `protobuf:"varint,3,opt,name=redPacketCount,proto3" json:"redPacketCount,omitempty"`
	// 发送红包总积分
	SumPoints  float32 `protobuf:"fixed32,4,opt,name=sumPoints,proto3" json:"sumPoints,omitempty"`
	Points     float32 `protobuf:"fixed32,5,opt,name=points,proto3" json:"points,omitempty"`
	Count      int32   `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	Title      string  `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	LastDigits []int32 `protobuf:"varint,8,rep,packed,name=lastDigits,proto3" json:"lastDigits,omitempty"`
}

func (x *BatchRedPacketReq) Reset() {
	*x = BatchRedPacketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRedPacketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRedPacketReq) ProtoMessage() {}

func (x *BatchRedPacketReq) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRedPacketReq.ProtoReflect.Descriptor instead.
func (*BatchRedPacketReq) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{10}
}

func (x *BatchRedPacketReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *BatchRedPacketReq) GetSendUserId() string {
	if x != nil {
		return x.SendUserId
	}
	return ""
}

func (x *BatchRedPacketReq) GetRedPacketCount() int32 {
	if x != nil {
		return x.RedPacketCount
	}
	return 0
}

func (x *BatchRedPacketReq) GetSumPoints() float32 {
	if x != nil {
		return x.SumPoints
	}
	return 0
}

func (x *BatchRedPacketReq) GetPoints() float32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *BatchRedPacketReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BatchRedPacketReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BatchRedPacketReq) GetLastDigits() []int32 {
	if x != nil {
		return x.LastDigits
	}
	return nil
}

type SendRedPacketResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedPacketId    string `protobuf:"bytes,1,opt,name=redPacketId,proto3" json:"redPacketId,omitempty"`
	RedPacketState int32  `protobuf:"varint,2,opt,name=redPacketState,proto3" json:"redPacketState,omitempty"`
}

func (x *SendRedPacketResp) Reset() {
	*x = SendRedPacketResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRedPacketResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRedPacketResp) ProtoMessage() {}

func (x *SendRedPacketResp) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRedPacketResp.ProtoReflect.Descriptor instead.
func (*SendRedPacketResp) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{11}
}

func (x *SendRedPacketResp) GetRedPacketId() string {
	if x != nil {
		return x.RedPacketId
	}
	return ""
}

func (x *SendRedPacketResp) GetRedPacketState() int32 {
	if x != nil {
		return x.RedPacketState
	}
	return 0
}

type ResetRedPacketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedPacketId string `protobuf:"bytes,1,opt,name=redPacketId,proto3" json:"redPacketId,omitempty"`
}

func (x *ResetRedPacketReq) Reset() {
	*x = ResetRedPacketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetRedPacketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetRedPacketReq) ProtoMessage() {}

func (x *ResetRedPacketReq) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetRedPacketReq.ProtoReflect.Descriptor instead.
func (*ResetRedPacketReq) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{12}
}

func (x *ResetRedPacketReq) GetRedPacketId() string {
	if x != nil {
		return x.RedPacketId
	}
	return ""
}

type GrabRedPacketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationID string `protobuf:"bytes,1,opt,name=conversationID,proto3" json:"conversationID,omitempty"`
	Seq            int64  `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	RedPacketId    string `protobuf:"bytes,3,opt,name=redPacketId,proto3" json:"redPacketId,omitempty"`
	SendUserId     string `protobuf:"bytes,4,opt,name=sendUserId,proto3" json:"sendUserId,omitempty"`
	ReceiveUserId  string `protobuf:"bytes,5,opt,name=receiveUserId,proto3" json:"receiveUserId,omitempty"`
	GroupId        string `protobuf:"bytes,6,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *GrabRedPacketReq) Reset() {
	*x = GrabRedPacketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrabRedPacketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrabRedPacketReq) ProtoMessage() {}

func (x *GrabRedPacketReq) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrabRedPacketReq.ProtoReflect.Descriptor instead.
func (*GrabRedPacketReq) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{13}
}

func (x *GrabRedPacketReq) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *GrabRedPacketReq) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *GrabRedPacketReq) GetRedPacketId() string {
	if x != nil {
		return x.RedPacketId
	}
	return ""
}

func (x *GrabRedPacketReq) GetSendUserId() string {
	if x != nil {
		return x.SendUserId
	}
	return ""
}

func (x *GrabRedPacketReq) GetReceiveUserId() string {
	if x != nil {
		return x.ReceiveUserId
	}
	return ""
}

func (x *GrabRedPacketReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type GrabRedPacketTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedPacket   *GetRedPacketResp `protobuf:"bytes,1,opt,name=redPacket,proto3" json:"redPacket,omitempty"`
	SendUser    *sdkws.UserInfo   `protobuf:"bytes,2,opt,name=sendUser,proto3" json:"sendUser,omitempty"`
	ReceiveUser *sdkws.UserInfo   `protobuf:"bytes,3,opt,name=receiveUser,proto3" json:"receiveUser,omitempty"`
}

func (x *GrabRedPacketTips) Reset() {
	*x = GrabRedPacketTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrabRedPacketTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrabRedPacketTips) ProtoMessage() {}

func (x *GrabRedPacketTips) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrabRedPacketTips.ProtoReflect.Descriptor instead.
func (*GrabRedPacketTips) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{14}
}

func (x *GrabRedPacketTips) GetRedPacket() *GetRedPacketResp {
	if x != nil {
		return x.RedPacket
	}
	return nil
}

func (x *GrabRedPacketTips) GetSendUser() *sdkws.UserInfo {
	if x != nil {
		return x.SendUser
	}
	return nil
}

func (x *GrabRedPacketTips) GetReceiveUser() *sdkws.UserInfo {
	if x != nil {
		return x.ReceiveUser
	}
	return nil
}

type GrabMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Points int32  `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *GrabMessage) Reset() {
	*x = GrabMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrabMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrabMessage) ProtoMessage() {}

func (x *GrabMessage) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrabMessage.ProtoReflect.Descriptor instead.
func (*GrabMessage) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{15}
}

func (x *GrabMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GrabMessage) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

type GrabRedPacketResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool         `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int32        `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Data    *GrabMessage `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GrabRedPacketResp) Reset() {
	*x = GrabRedPacketResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrabRedPacketResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrabRedPacketResp) ProtoMessage() {}

func (x *GrabRedPacketResp) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrabRedPacketResp.ProtoReflect.Descriptor instead.
func (*GrabRedPacketResp) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{16}
}

func (x *GrabRedPacketResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GrabRedPacketResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GrabRedPacketResp) GetData() *GrabMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReceiveC2CRedPacketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedPacketId    string `protobuf:"bytes,1,opt,name=redPacketId,proto3" json:"redPacketId,omitempty"`
	ConversationID string `protobuf:"bytes,2,opt,name=conversationID,proto3" json:"conversationID,omitempty"`
	Seq            int64  `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *ReceiveC2CRedPacketReq) Reset() {
	*x = ReceiveC2CRedPacketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveC2CRedPacketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveC2CRedPacketReq) ProtoMessage() {}

func (x *ReceiveC2CRedPacketReq) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveC2CRedPacketReq.ProtoReflect.Descriptor instead.
func (*ReceiveC2CRedPacketReq) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{17}
}

func (x *ReceiveC2CRedPacketReq) GetRedPacketId() string {
	if x != nil {
		return x.RedPacketId
	}
	return ""
}

func (x *ReceiveC2CRedPacketReq) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *ReceiveC2CRedPacketReq) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type ReceiveC2CRedPacketResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ReceiveC2CRedPacketResp) Reset() {
	*x = ReceiveC2CRedPacketResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveC2CRedPacketResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveC2CRedPacketResp) ProtoMessage() {}

func (x *ReceiveC2CRedPacketResp) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveC2CRedPacketResp.ProtoReflect.Descriptor instead.
func (*ReceiveC2CRedPacketResp) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{18}
}

func (x *ReceiveC2CRedPacketResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetRedPacketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedPacketId string `protobuf:"bytes,1,opt,name=redPacketId,proto3" json:"redPacketId,omitempty"`
}

func (x *GetRedPacketReq) Reset() {
	*x = GetRedPacketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRedPacketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRedPacketReq) ProtoMessage() {}

func (x *GetRedPacketReq) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRedPacketReq.ProtoReflect.Descriptor instead.
func (*GetRedPacketReq) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{19}
}

func (x *GetRedPacketReq) GetRedPacketId() string {
	if x != nil {
		return x.RedPacketId
	}
	return ""
}

type GetRedPacketResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedPacketId    string   `protobuf:"bytes,1,opt,name=redPacketId,proto3" json:"redPacketId,omitempty"`
	RedPacketType  int32    `protobuf:"varint,2,opt,name=redPacketType,proto3" json:"redPacketType,omitempty"`
	RedPackerState int32    `protobuf:"varint,3,opt,name=redPackerState,proto3" json:"redPackerState,omitempty"`
	GroupId        string   `protobuf:"bytes,4,opt,name=groupId,proto3" json:"groupId,omitempty"`
	SendUserId     string   `protobuf:"bytes,5,opt,name=sendUserId,proto3" json:"sendUserId,omitempty"`
	ReceiveUserId  string   `protobuf:"bytes,6,opt,name=receiveUserId,proto3" json:"receiveUserId,omitempty"`
	Points         float32  `protobuf:"fixed32,7,opt,name=points,proto3" json:"points,omitempty"`
	RemainPoints   float32  `protobuf:"fixed32,8,opt,name=remainPoints,proto3" json:"remainPoints,omitempty"`
	Count          int32    `protobuf:"varint,9,opt,name=count,proto3" json:"count,omitempty"`
	RemainCount    int32    `protobuf:"varint,10,opt,name=remainCount,proto3" json:"remainCount,omitempty"`
	LastDigits     []int32  `protobuf:"varint,11,rep,packed,name=lastDigits,proto3" json:"lastDigits,omitempty"`
	FixedIndex     []int32  `protobuf:"varint,12,rep,packed,name=fixedIndex,proto3" json:"fixedIndex,omitempty"`
	WhiteList      []string `protobuf:"bytes,13,rep,name=whiteList,proto3" json:"whiteList,omitempty"`
	CreateTime     string   `protobuf:"bytes,14,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime     string   `protobuf:"bytes,15,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *GetRedPacketResp) Reset() {
	*x = GetRedPacketResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRedPacketResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRedPacketResp) ProtoMessage() {}

func (x *GetRedPacketResp) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRedPacketResp.ProtoReflect.Descriptor instead.
func (*GetRedPacketResp) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{20}
}

func (x *GetRedPacketResp) GetRedPacketId() string {
	if x != nil {
		return x.RedPacketId
	}
	return ""
}

func (x *GetRedPacketResp) GetRedPacketType() int32 {
	if x != nil {
		return x.RedPacketType
	}
	return 0
}

func (x *GetRedPacketResp) GetRedPackerState() int32 {
	if x != nil {
		return x.RedPackerState
	}
	return 0
}

func (x *GetRedPacketResp) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GetRedPacketResp) GetSendUserId() string {
	if x != nil {
		return x.SendUserId
	}
	return ""
}

func (x *GetRedPacketResp) GetReceiveUserId() string {
	if x != nil {
		return x.ReceiveUserId
	}
	return ""
}

func (x *GetRedPacketResp) GetPoints() float32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *GetRedPacketResp) GetRemainPoints() float32 {
	if x != nil {
		return x.RemainPoints
	}
	return 0
}

func (x *GetRedPacketResp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetRedPacketResp) GetRemainCount() int32 {
	if x != nil {
		return x.RemainCount
	}
	return 0
}

func (x *GetRedPacketResp) GetLastDigits() []int32 {
	if x != nil {
		return x.LastDigits
	}
	return nil
}

func (x *GetRedPacketResp) GetFixedIndex() []int32 {
	if x != nil {
		return x.FixedIndex
	}
	return nil
}

func (x *GetRedPacketResp) GetWhiteList() []string {
	if x != nil {
		return x.WhiteList
	}
	return nil
}

func (x *GetRedPacketResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *GetRedPacketResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type GetRedPacketDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedPacketId   string `protobuf:"bytes,1,opt,name=redPacketId,proto3" json:"redPacketId,omitempty"`
	RedPacketType int32  `protobuf:"varint,2,opt,name=redPacketType,proto3" json:"redPacketType,omitempty"`
}

func (x *GetRedPacketDetailReq) Reset() {
	*x = GetRedPacketDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRedPacketDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRedPacketDetailReq) ProtoMessage() {}

func (x *GetRedPacketDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRedPacketDetailReq.ProtoReflect.Descriptor instead.
func (*GetRedPacketDetailReq) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{21}
}

func (x *GetRedPacketDetailReq) GetRedPacketId() string {
	if x != nil {
		return x.RedPacketId
	}
	return ""
}

func (x *GetRedPacketDetailReq) GetRedPacketType() int32 {
	if x != nil {
		return x.RedPacketType
	}
	return 0
}

type ReceiveWaterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiveWaterId string  `protobuf:"bytes,1,opt,name=receiveWaterId,proto3" json:"receiveWaterId,omitempty"`
	RedPacketId    string  `protobuf:"bytes,2,opt,name=redPacketId,proto3" json:"redPacketId,omitempty"`
	ReceiveUserId  string  `protobuf:"bytes,3,opt,name=receiveUserId,proto3" json:"receiveUserId,omitempty"`
	Points         float32 `protobuf:"fixed32,4,opt,name=points,proto3" json:"points,omitempty"`
	CreateTime     string  `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	NickName       string  `protobuf:"bytes,6,opt,name=nickName,proto3" json:"nickName,omitempty"`
	FaceUrl        string  `protobuf:"bytes,7,opt,name=faceUrl,proto3" json:"faceUrl,omitempty"`
}

func (x *ReceiveWaterResp) Reset() {
	*x = ReceiveWaterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveWaterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveWaterResp) ProtoMessage() {}

func (x *ReceiveWaterResp) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveWaterResp.ProtoReflect.Descriptor instead.
func (*ReceiveWaterResp) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{22}
}

func (x *ReceiveWaterResp) GetReceiveWaterId() string {
	if x != nil {
		return x.ReceiveWaterId
	}
	return ""
}

func (x *ReceiveWaterResp) GetRedPacketId() string {
	if x != nil {
		return x.RedPacketId
	}
	return ""
}

func (x *ReceiveWaterResp) GetReceiveUserId() string {
	if x != nil {
		return x.ReceiveUserId
	}
	return ""
}

func (x *ReceiveWaterResp) GetPoints() float32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *ReceiveWaterResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ReceiveWaterResp) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *ReceiveWaterResp) GetFaceUrl() string {
	if x != nil {
		return x.FaceUrl
	}
	return ""
}

type GetRedPacketDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info  *GetRedPacketResp   `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Water []*ReceiveWaterResp `protobuf:"bytes,2,rep,name=water,proto3" json:"water,omitempty"`
}

func (x *GetRedPacketDetailResp) Reset() {
	*x = GetRedPacketDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRedPacketDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRedPacketDetailResp) ProtoMessage() {}

func (x *GetRedPacketDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRedPacketDetailResp.ProtoReflect.Descriptor instead.
func (*GetRedPacketDetailResp) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{23}
}

func (x *GetRedPacketDetailResp) GetInfo() *GetRedPacketResp {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GetRedPacketDetailResp) GetWater() []*ReceiveWaterResp {
	if x != nil {
		return x.Water
	}
	return nil
}

type RedPacketOverTimeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedPacketId string `protobuf:"bytes,1,opt,name=redPacketId,proto3" json:"redPacketId,omitempty"`
}

func (x *RedPacketOverTimeReq) Reset() {
	*x = RedPacketOverTimeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPacketOverTimeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPacketOverTimeReq) ProtoMessage() {}

func (x *RedPacketOverTimeReq) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPacketOverTimeReq.ProtoReflect.Descriptor instead.
func (*RedPacketOverTimeReq) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{24}
}

func (x *RedPacketOverTimeReq) GetRedPacketId() string {
	if x != nil {
		return x.RedPacketId
	}
	return ""
}

type RedPacketOverTimeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RedPacketOverTimeResp) Reset() {
	*x = RedPacketOverTimeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_points_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPacketOverTimeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPacketOverTimeResp) ProtoMessage() {}

func (x *RedPacketOverTimeResp) ProtoReflect() protoreflect.Message {
	mi := &file_points_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPacketOverTimeResp.ProtoReflect.Descriptor instead.
func (*RedPacketOverTimeResp) Descriptor() ([]byte, []int) {
	return file_points_proto_rawDescGZIP(), []int{25}
}

var File_points_proto protoreflect.FileDescriptor

var file_points_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2f, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x27, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x0e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x5d, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x15, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x32, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x57, 0x61, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x61, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x02, 0x0a,
	0x0b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x61, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x61, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x57, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x61, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x16, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x42, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x61, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x57, 0x61, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9e, 0x02, 0x0a, 0x10, 0x53,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x11,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x75, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x67,
	0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x44,
	0x69, 0x67, 0x69, 0x74, 0x73, 0x22, 0x5d, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x35, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x10,
	0x47, 0x72, 0x61, 0x62, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xd2, 0x01, 0x0a,
	0x11, 0x47, 0x72, 0x61, 0x62, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69,
	0x70, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x52, 0x09, 0x72, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x22, 0x3d, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x22, 0x77, 0x0a, 0x11, 0x47, 0x72, 0x61, 0x62, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x62, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x16, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x43, 0x32, 0x43, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22,
	0x33, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x32, 0x43, 0x52, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x33, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0xf4, 0x03, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x5f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xf0, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61,
	0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x72, 0x6c, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x39, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x05, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x05, 0x77, 0x61, 0x74, 0x65, 0x72, 0x22, 0x38, 0x0a, 0x14, 0x52, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x76,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x32, 0xbd, 0x09, 0x0a, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x6d, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x2a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x2b, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6d,
	0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x2a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71,
	0x1a, 0x2b, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6d, 0x0a,
	0x12, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x61, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x2b, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x61, 0x74, 0x65,
	0x72, 0x46, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5e, 0x0a, 0x0d,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x25, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x1a, 0x26, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x26,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x50,
	0x0a, 0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x26, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x5e, 0x0a, 0x0d, 0x47, 0x72, 0x61, 0x62, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x25, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x62, 0x52, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47,
	0x72, 0x61, 0x62, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x70, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x32, 0x43, 0x52, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x32, 0x43, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x43, 0x32, 0x43, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x5b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x24, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x6a, 0x0a, 0x11, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x2a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4f,
	0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6d, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x2a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53,
	0x44, 0x4b, 0x2f, 0x4f, 0x70, 0x65, 0x6e, 0x2d, 0x49, 0x4d, 0x2d, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_points_proto_rawDescOnce sync.Once
	file_points_proto_rawDescData = file_points_proto_rawDesc
)

func file_points_proto_rawDescGZIP() []byte {
	file_points_proto_rawDescOnce.Do(func() {
		file_points_proto_rawDescData = protoimpl.X.CompressGZIP(file_points_proto_rawDescData)
	})
	return file_points_proto_rawDescData
}

var file_points_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_points_proto_goTypes = []interface{}{
	(*UserPointsReq)(nil),           // 0: OpenIMServer.points.UserPointsReq
	(*UserPointsResp)(nil),          // 1: OpenIMServer.points.UserPointsResp
	(*UserPointsRechargeReq)(nil),   // 2: OpenIMServer.points.UserPointsRechargeReq
	(*UserPointsRechargeResp)(nil),  // 3: OpenIMServer.points.UserPointsRechargeResp
	(*UserPointsWithdrawReq)(nil),   // 4: OpenIMServer.points.UserPointsWithdrawReq
	(*UserPointsWithdrawResp)(nil),  // 5: OpenIMServer.points.UserPointsWithdrawResp
	(*PointsWaterForTypeReq)(nil),   // 6: OpenIMServer.points.PointsWaterForTypeReq
	(*PointsWater)(nil),             // 7: OpenIMServer.points.PointsWater
	(*PointsWaterForTypeResp)(nil),  // 8: OpenIMServer.points.PointsWaterForTypeResp
	(*SendRedPacketRep)(nil),        // 9: OpenIMServer.points.SendRedPacketRep
	(*BatchRedPacketReq)(nil),       // 10: OpenIMServer.points.BatchRedPacketReq
	(*SendRedPacketResp)(nil),       // 11: OpenIMServer.points.SendRedPacketResp
	(*ResetRedPacketReq)(nil),       // 12: OpenIMServer.points.ResetRedPacketReq
	(*GrabRedPacketReq)(nil),        // 13: OpenIMServer.points.GrabRedPacketReq
	(*GrabRedPacketTips)(nil),       // 14: OpenIMServer.points.GrabRedPacketTips
	(*GrabMessage)(nil),             // 15: OpenIMServer.points.GrabMessage
	(*GrabRedPacketResp)(nil),       // 16: OpenIMServer.points.GrabRedPacketResp
	(*ReceiveC2CRedPacketReq)(nil),  // 17: OpenIMServer.points.ReceiveC2CRedPacketReq
	(*ReceiveC2CRedPacketResp)(nil), // 18: OpenIMServer.points.ReceiveC2CRedPacketResp
	(*GetRedPacketReq)(nil),         // 19: OpenIMServer.points.GetRedPacketReq
	(*GetRedPacketResp)(nil),        // 20: OpenIMServer.points.GetRedPacketResp
	(*GetRedPacketDetailReq)(nil),   // 21: OpenIMServer.points.GetRedPacketDetailReq
	(*ReceiveWaterResp)(nil),        // 22: OpenIMServer.points.ReceiveWaterResp
	(*GetRedPacketDetailResp)(nil),  // 23: OpenIMServer.points.GetRedPacketDetailResp
	(*RedPacketOverTimeReq)(nil),    // 24: OpenIMServer.points.RedPacketOverTimeReq
	(*RedPacketOverTimeResp)(nil),   // 25: OpenIMServer.points.RedPacketOverTimeResp
	(*sdkws.RequestPagination)(nil), // 26: OpenIMServer.sdkws.RequestPagination
	(*sdkws.UserInfo)(nil),          // 27: OpenIMServer.sdkws.UserInfo
	(*emptypb.Empty)(nil),           // 28: google.protobuf.Empty
}
var file_points_proto_depIdxs = []int32{
	26, // 0: OpenIMServer.points.PointsWaterForTypeReq.pagination:type_name -> OpenIMServer.sdkws.RequestPagination
	7,  // 1: OpenIMServer.points.PointsWaterForTypeResp.pointsWater:type_name -> OpenIMServer.points.PointsWater
	20, // 2: OpenIMServer.points.GrabRedPacketTips.redPacket:type_name -> OpenIMServer.points.GetRedPacketResp
	27, // 3: OpenIMServer.points.GrabRedPacketTips.sendUser:type_name -> OpenIMServer.sdkws.UserInfo
	27, // 4: OpenIMServer.points.GrabRedPacketTips.receiveUser:type_name -> OpenIMServer.sdkws.UserInfo
	15, // 5: OpenIMServer.points.GrabRedPacketResp.data:type_name -> OpenIMServer.points.GrabMessage
	20, // 6: OpenIMServer.points.GetRedPacketDetailResp.info:type_name -> OpenIMServer.points.GetRedPacketResp
	22, // 7: OpenIMServer.points.GetRedPacketDetailResp.water:type_name -> OpenIMServer.points.ReceiveWaterResp
	0,  // 8: OpenIMServer.points.points.GetUserPoints:input_type -> OpenIMServer.points.UserPointsReq
	2,  // 9: OpenIMServer.points.points.UserPointsRecharge:input_type -> OpenIMServer.points.UserPointsRechargeReq
	4,  // 10: OpenIMServer.points.points.UserPointsWithdraw:input_type -> OpenIMServer.points.UserPointsWithdrawReq
	6,  // 11: OpenIMServer.points.points.PointsWaterForType:input_type -> OpenIMServer.points.PointsWaterForTypeReq
	9,  // 12: OpenIMServer.points.points.SendRedPacket:input_type -> OpenIMServer.points.SendRedPacketRep
	12, // 13: OpenIMServer.points.points.ResetRedPacket:input_type -> OpenIMServer.points.ResetRedPacketReq
	10, // 14: OpenIMServer.points.points.BatchRedPacket:input_type -> OpenIMServer.points.BatchRedPacketReq
	13, // 15: OpenIMServer.points.points.GrabRedPacket:input_type -> OpenIMServer.points.GrabRedPacketReq
	17, // 16: OpenIMServer.points.points.ReceiveC2CRedPacket:input_type -> OpenIMServer.points.ReceiveC2CRedPacketReq
	19, // 17: OpenIMServer.points.points.GetRedPacket:input_type -> OpenIMServer.points.GetRedPacketReq
	24, // 18: OpenIMServer.points.points.RedPacketOverTime:input_type -> OpenIMServer.points.RedPacketOverTimeReq
	21, // 19: OpenIMServer.points.points.GetRedPacketDetail:input_type -> OpenIMServer.points.GetRedPacketDetailReq
	1,  // 20: OpenIMServer.points.points.GetUserPoints:output_type -> OpenIMServer.points.UserPointsResp
	3,  // 21: OpenIMServer.points.points.UserPointsRecharge:output_type -> OpenIMServer.points.UserPointsRechargeResp
	5,  // 22: OpenIMServer.points.points.UserPointsWithdraw:output_type -> OpenIMServer.points.UserPointsWithdrawResp
	8,  // 23: OpenIMServer.points.points.PointsWaterForType:output_type -> OpenIMServer.points.PointsWaterForTypeResp
	11, // 24: OpenIMServer.points.points.SendRedPacket:output_type -> OpenIMServer.points.SendRedPacketResp
	28, // 25: OpenIMServer.points.points.ResetRedPacket:output_type -> google.protobuf.Empty
	28, // 26: OpenIMServer.points.points.BatchRedPacket:output_type -> google.protobuf.Empty
	16, // 27: OpenIMServer.points.points.GrabRedPacket:output_type -> OpenIMServer.points.GrabRedPacketResp
	18, // 28: OpenIMServer.points.points.ReceiveC2CRedPacket:output_type -> OpenIMServer.points.ReceiveC2CRedPacketResp
	20, // 29: OpenIMServer.points.points.GetRedPacket:output_type -> OpenIMServer.points.GetRedPacketResp
	25, // 30: OpenIMServer.points.points.RedPacketOverTime:output_type -> OpenIMServer.points.RedPacketOverTimeResp
	23, // 31: OpenIMServer.points.points.GetRedPacketDetail:output_type -> OpenIMServer.points.GetRedPacketDetailResp
	20, // [20:32] is the sub-list for method output_type
	8,  // [8:20] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_points_proto_init() }
func file_points_proto_init() {
	if File_points_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_points_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPointsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPointsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPointsRechargeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPointsRechargeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPointsWithdrawReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPointsWithdrawResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointsWaterForTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointsWater); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointsWaterForTypeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRedPacketRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchRedPacketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRedPacketResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetRedPacketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrabRedPacketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrabRedPacketTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrabMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrabRedPacketResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveC2CRedPacketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveC2CRedPacketResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRedPacketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRedPacketResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRedPacketDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveWaterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRedPacketDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPacketOverTimeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_points_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPacketOverTimeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_points_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_points_proto_goTypes,
		DependencyIndexes: file_points_proto_depIdxs,
		MessageInfos:      file_points_proto_msgTypes,
	}.Build()
	File_points_proto = out.File
	file_points_proto_rawDesc = nil
	file_points_proto_goTypes = nil
	file_points_proto_depIdxs = nil
}
