// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: points.proto

package points

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Points_GetUserPoints_FullMethodName       = "/OpenIMServer.points.points/GetUserPoints"
	Points_UserPointsRecharge_FullMethodName  = "/OpenIMServer.points.points/UserPointsRecharge"
	Points_UserPointsWithdraw_FullMethodName  = "/OpenIMServer.points.points/UserPointsWithdraw"
	Points_PointsWaterForType_FullMethodName  = "/OpenIMServer.points.points/PointsWaterForType"
	Points_SendRedPacket_FullMethodName       = "/OpenIMServer.points.points/SendRedPacket"
	Points_ResetRedPacket_FullMethodName      = "/OpenIMServer.points.points/ResetRedPacket"
	Points_BatchRedPacket_FullMethodName      = "/OpenIMServer.points.points/BatchRedPacket"
	Points_GrabRedPacket_FullMethodName       = "/OpenIMServer.points.points/GrabRedPacket"
	Points_ReceiveC2CRedPacket_FullMethodName = "/OpenIMServer.points.points/ReceiveC2CRedPacket"
	Points_GetRedPacket_FullMethodName        = "/OpenIMServer.points.points/GetRedPacket"
	Points_RedPacketOverTime_FullMethodName   = "/OpenIMServer.points.points/RedPacketOverTime"
	Points_GetRedPacketDetail_FullMethodName  = "/OpenIMServer.points.points/GetRedPacketDetail"
)

// PointsClient is the client API for Points service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PointsClient interface {
	// 获取用户积分
	GetUserPoints(ctx context.Context, in *UserPointsReq, opts ...grpc.CallOption) (*UserPointsResp, error)
	// 用户积分充值
	UserPointsRecharge(ctx context.Context, in *UserPointsRechargeReq, opts ...grpc.CallOption) (*UserPointsRechargeResp, error)
	// 用户积分提取
	UserPointsWithdraw(ctx context.Context, in *UserPointsWithdrawReq, opts ...grpc.CallOption) (*UserPointsWithdrawResp, error)
	// 根据积分类型查询流水
	PointsWaterForType(ctx context.Context, in *PointsWaterForTypeReq, opts ...grpc.CallOption) (*PointsWaterForTypeResp, error)
	// 发红包
	SendRedPacket(ctx context.Context, in *SendRedPacketRep, opts ...grpc.CallOption) (*SendRedPacketResp, error)
	// 消息发送失败重置红包
	ResetRedPacket(ctx context.Context, in *ResetRedPacketReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 批量发送红包
	BatchRedPacket(ctx context.Context, in *BatchRedPacketReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 抢红包
	GrabRedPacket(ctx context.Context, in *GrabRedPacketReq, opts ...grpc.CallOption) (*GrabRedPacketResp, error)
	// C2C红包接收
	ReceiveC2CRedPacket(ctx context.Context, in *ReceiveC2CRedPacketReq, opts ...grpc.CallOption) (*ReceiveC2CRedPacketResp, error)
	// 获取红包
	GetRedPacket(ctx context.Context, in *GetRedPacketReq, opts ...grpc.CallOption) (*GetRedPacketResp, error)
	// 红包过期
	RedPacketOverTime(ctx context.Context, in *RedPacketOverTimeReq, opts ...grpc.CallOption) (*RedPacketOverTimeResp, error)
	// 获取红包信息，群红包返回流水
	GetRedPacketDetail(ctx context.Context, in *GetRedPacketDetailReq, opts ...grpc.CallOption) (*GetRedPacketDetailResp, error)
}

type pointsClient struct {
	cc grpc.ClientConnInterface
}

func NewPointsClient(cc grpc.ClientConnInterface) PointsClient {
	return &pointsClient{cc}
}

func (c *pointsClient) GetUserPoints(ctx context.Context, in *UserPointsReq, opts ...grpc.CallOption) (*UserPointsResp, error) {
	out := new(UserPointsResp)
	err := c.cc.Invoke(ctx, Points_GetUserPoints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) UserPointsRecharge(ctx context.Context, in *UserPointsRechargeReq, opts ...grpc.CallOption) (*UserPointsRechargeResp, error) {
	out := new(UserPointsRechargeResp)
	err := c.cc.Invoke(ctx, Points_UserPointsRecharge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) UserPointsWithdraw(ctx context.Context, in *UserPointsWithdrawReq, opts ...grpc.CallOption) (*UserPointsWithdrawResp, error) {
	out := new(UserPointsWithdrawResp)
	err := c.cc.Invoke(ctx, Points_UserPointsWithdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) PointsWaterForType(ctx context.Context, in *PointsWaterForTypeReq, opts ...grpc.CallOption) (*PointsWaterForTypeResp, error) {
	out := new(PointsWaterForTypeResp)
	err := c.cc.Invoke(ctx, Points_PointsWaterForType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) SendRedPacket(ctx context.Context, in *SendRedPacketRep, opts ...grpc.CallOption) (*SendRedPacketResp, error) {
	out := new(SendRedPacketResp)
	err := c.cc.Invoke(ctx, Points_SendRedPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) ResetRedPacket(ctx context.Context, in *ResetRedPacketReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Points_ResetRedPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) BatchRedPacket(ctx context.Context, in *BatchRedPacketReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Points_BatchRedPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) GrabRedPacket(ctx context.Context, in *GrabRedPacketReq, opts ...grpc.CallOption) (*GrabRedPacketResp, error) {
	out := new(GrabRedPacketResp)
	err := c.cc.Invoke(ctx, Points_GrabRedPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) ReceiveC2CRedPacket(ctx context.Context, in *ReceiveC2CRedPacketReq, opts ...grpc.CallOption) (*ReceiveC2CRedPacketResp, error) {
	out := new(ReceiveC2CRedPacketResp)
	err := c.cc.Invoke(ctx, Points_ReceiveC2CRedPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) GetRedPacket(ctx context.Context, in *GetRedPacketReq, opts ...grpc.CallOption) (*GetRedPacketResp, error) {
	out := new(GetRedPacketResp)
	err := c.cc.Invoke(ctx, Points_GetRedPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) RedPacketOverTime(ctx context.Context, in *RedPacketOverTimeReq, opts ...grpc.CallOption) (*RedPacketOverTimeResp, error) {
	out := new(RedPacketOverTimeResp)
	err := c.cc.Invoke(ctx, Points_RedPacketOverTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) GetRedPacketDetail(ctx context.Context, in *GetRedPacketDetailReq, opts ...grpc.CallOption) (*GetRedPacketDetailResp, error) {
	out := new(GetRedPacketDetailResp)
	err := c.cc.Invoke(ctx, Points_GetRedPacketDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PointsServer is the server API for Points service.
// All implementations must embed UnimplementedPointsServer
// for forward compatibility
type PointsServer interface {
	// 获取用户积分
	GetUserPoints(context.Context, *UserPointsReq) (*UserPointsResp, error)
	// 用户积分充值
	UserPointsRecharge(context.Context, *UserPointsRechargeReq) (*UserPointsRechargeResp, error)
	// 用户积分提取
	UserPointsWithdraw(context.Context, *UserPointsWithdrawReq) (*UserPointsWithdrawResp, error)
	// 根据积分类型查询流水
	PointsWaterForType(context.Context, *PointsWaterForTypeReq) (*PointsWaterForTypeResp, error)
	// 发红包
	SendRedPacket(context.Context, *SendRedPacketRep) (*SendRedPacketResp, error)
	// 消息发送失败重置红包
	ResetRedPacket(context.Context, *ResetRedPacketReq) (*emptypb.Empty, error)
	// 批量发送红包
	BatchRedPacket(context.Context, *BatchRedPacketReq) (*emptypb.Empty, error)
	// 抢红包
	GrabRedPacket(context.Context, *GrabRedPacketReq) (*GrabRedPacketResp, error)
	// C2C红包接收
	ReceiveC2CRedPacket(context.Context, *ReceiveC2CRedPacketReq) (*ReceiveC2CRedPacketResp, error)
	// 获取红包
	GetRedPacket(context.Context, *GetRedPacketReq) (*GetRedPacketResp, error)
	// 红包过期
	RedPacketOverTime(context.Context, *RedPacketOverTimeReq) (*RedPacketOverTimeResp, error)
	// 获取红包信息，群红包返回流水
	GetRedPacketDetail(context.Context, *GetRedPacketDetailReq) (*GetRedPacketDetailResp, error)
	mustEmbedUnimplementedPointsServer()
}

// UnimplementedPointsServer must be embedded to have forward compatible implementations.
type UnimplementedPointsServer struct {
}

func (UnimplementedPointsServer) GetUserPoints(context.Context, *UserPointsReq) (*UserPointsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPoints not implemented")
}
func (UnimplementedPointsServer) UserPointsRecharge(context.Context, *UserPointsRechargeReq) (*UserPointsRechargeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPointsRecharge not implemented")
}
func (UnimplementedPointsServer) UserPointsWithdraw(context.Context, *UserPointsWithdrawReq) (*UserPointsWithdrawResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPointsWithdraw not implemented")
}
func (UnimplementedPointsServer) PointsWaterForType(context.Context, *PointsWaterForTypeReq) (*PointsWaterForTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PointsWaterForType not implemented")
}
func (UnimplementedPointsServer) SendRedPacket(context.Context, *SendRedPacketRep) (*SendRedPacketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRedPacket not implemented")
}
func (UnimplementedPointsServer) ResetRedPacket(context.Context, *ResetRedPacketReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetRedPacket not implemented")
}
func (UnimplementedPointsServer) BatchRedPacket(context.Context, *BatchRedPacketReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRedPacket not implemented")
}
func (UnimplementedPointsServer) GrabRedPacket(context.Context, *GrabRedPacketReq) (*GrabRedPacketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrabRedPacket not implemented")
}
func (UnimplementedPointsServer) ReceiveC2CRedPacket(context.Context, *ReceiveC2CRedPacketReq) (*ReceiveC2CRedPacketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveC2CRedPacket not implemented")
}
func (UnimplementedPointsServer) GetRedPacket(context.Context, *GetRedPacketReq) (*GetRedPacketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedPacket not implemented")
}
func (UnimplementedPointsServer) RedPacketOverTime(context.Context, *RedPacketOverTimeReq) (*RedPacketOverTimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedPacketOverTime not implemented")
}
func (UnimplementedPointsServer) GetRedPacketDetail(context.Context, *GetRedPacketDetailReq) (*GetRedPacketDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedPacketDetail not implemented")
}
func (UnimplementedPointsServer) mustEmbedUnimplementedPointsServer() {}

// UnsafePointsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PointsServer will
// result in compilation errors.
type UnsafePointsServer interface {
	mustEmbedUnimplementedPointsServer()
}

func RegisterPointsServer(s grpc.ServiceRegistrar, srv PointsServer) {
	s.RegisterService(&Points_ServiceDesc, srv)
}

func _Points_GetUserPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPointsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).GetUserPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_GetUserPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).GetUserPoints(ctx, req.(*UserPointsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_UserPointsRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPointsRechargeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).UserPointsRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_UserPointsRecharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).UserPointsRecharge(ctx, req.(*UserPointsRechargeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_UserPointsWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPointsWithdrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).UserPointsWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_UserPointsWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).UserPointsWithdraw(ctx, req.(*UserPointsWithdrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_PointsWaterForType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointsWaterForTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).PointsWaterForType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_PointsWaterForType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).PointsWaterForType(ctx, req.(*PointsWaterForTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_SendRedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRedPacketRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).SendRedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_SendRedPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).SendRedPacket(ctx, req.(*SendRedPacketRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_ResetRedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRedPacketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).ResetRedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_ResetRedPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).ResetRedPacket(ctx, req.(*ResetRedPacketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_BatchRedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRedPacketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).BatchRedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_BatchRedPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).BatchRedPacket(ctx, req.(*BatchRedPacketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_GrabRedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrabRedPacketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).GrabRedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_GrabRedPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).GrabRedPacket(ctx, req.(*GrabRedPacketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_ReceiveC2CRedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveC2CRedPacketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).ReceiveC2CRedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_ReceiveC2CRedPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).ReceiveC2CRedPacket(ctx, req.(*ReceiveC2CRedPacketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_GetRedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRedPacketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).GetRedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_GetRedPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).GetRedPacket(ctx, req.(*GetRedPacketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_RedPacketOverTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedPacketOverTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).RedPacketOverTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_RedPacketOverTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).RedPacketOverTime(ctx, req.(*RedPacketOverTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_GetRedPacketDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRedPacketDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).GetRedPacketDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Points_GetRedPacketDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).GetRedPacketDetail(ctx, req.(*GetRedPacketDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Points_ServiceDesc is the grpc.ServiceDesc for Points service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Points_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OpenIMServer.points.points",
	HandlerType: (*PointsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserPoints",
			Handler:    _Points_GetUserPoints_Handler,
		},
		{
			MethodName: "UserPointsRecharge",
			Handler:    _Points_UserPointsRecharge_Handler,
		},
		{
			MethodName: "UserPointsWithdraw",
			Handler:    _Points_UserPointsWithdraw_Handler,
		},
		{
			MethodName: "PointsWaterForType",
			Handler:    _Points_PointsWaterForType_Handler,
		},
		{
			MethodName: "SendRedPacket",
			Handler:    _Points_SendRedPacket_Handler,
		},
		{
			MethodName: "ResetRedPacket",
			Handler:    _Points_ResetRedPacket_Handler,
		},
		{
			MethodName: "BatchRedPacket",
			Handler:    _Points_BatchRedPacket_Handler,
		},
		{
			MethodName: "GrabRedPacket",
			Handler:    _Points_GrabRedPacket_Handler,
		},
		{
			MethodName: "ReceiveC2CRedPacket",
			Handler:    _Points_ReceiveC2CRedPacket_Handler,
		},
		{
			MethodName: "GetRedPacket",
			Handler:    _Points_GetRedPacket_Handler,
		},
		{
			MethodName: "RedPacketOverTime",
			Handler:    _Points_RedPacketOverTime_Handler,
		},
		{
			MethodName: "GetRedPacketDetail",
			Handler:    _Points_GetRedPacketDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "points.proto",
}
